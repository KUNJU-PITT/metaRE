% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/permutationTest.R
\name{permutationTest}
\alias{permutationTest}
\title{Permutation test on Meta P-Values of Association}
\usage{
permutationTest(hypothesesClasses, annotationClasses, n,
  alternative = c("greater", "less", "two.sided"),
  outfile = "./perm_test.csv", pvaluePreFilter = NULL, perRun = n)
}
\arguments{
\item{hypothesesClasses}{An object of \code{\link{GeneClassificationSparse}}
class, usually describes sets of genes in which motifs are present}

\item{annotationClasses}{An object of \code{\link{GeneClassificationMatrix}}
class, usually describes sets of genes which were differentially expressed in
experiments}

\item{n}{number of permutations}

\item{alternative}{indicates the alternative hypothesis and must be one of
"two.sided", "greater" or "less"}

\item{outfile}{path to file for writing the preliminary results of permuation
test}

\item{pvaluePreFilter}{threshold on permutation p-value: if the
hypotheses gets p-value above the threshold, it is excluded from the
analysis.}

\item{perRun}{number of permuations for a single run (see Details)}
}
\value{
A \code{\link{data.frame}} with the following columns:
\describe{
\item{Hypothesis}{hypothesis name taken from \code{hypothesesClasses}}
\item{LEQ}{number of permutations where meta p-value was less or equal to the
real meta p-value.}
\item{Permuations}{total number of permutations}
\item{Meta.P.Value}{raw meta p-values}
\item{Permutation.P.Value}{raw permuation p-values}
}
}
\description{
Calculate permutation test in order to evaluate robustness of
the meta p-values obtained in \code{\link{testRegulationHypotheses}}.
}
\details{
Each gene has a specific hypotheses profile (described by
\code{hypothesesClasses}) and a specific annotation profile (described by
\code{annotationClasses}). One can see a gene as a connection between two
profiles. The permutation test breaks this connection and assigns a random
hypotheses profile to each annotation profile without replacement. (E.g. if
hypotheses are regulatory elements in gene promoters and annotations are
significant differential expressions of genes in a set of experiments,
one can say that permutation test assigns a random promoter to a gene). This
way test permutation test applies random permutations while keeping the
profiles realistic from biological standpoint.

The permutation p-value is calculated as \code{perm.p.value = (LEQ+1)/(n+1)},
where \code{LEQ} is the number of permutations where meta p-values were less
or equal to the real meta p-values, \code{n} is the number of permutations.

The test automatically writes the intermediate results to \code{outfile} and
the previous intermediate results to \code{outfile} with '.last' suffix
and excludes hypotheses that will have the permutation p-value above
\code{pvaluePreFilter} from analysis after every \code{perRun} permutations.

\code{permuationTest} uses \code{\link{foreach}} and will run in parallel
if a parallel foreach backend is registered (e.g.
\code{\link[doParallel]{registerDoParallel}}). The calculations will be
performed in batches of size \code{perRun}, which will be split equally
between workers.
}
\examples{
elements <- 5
genes <- 200
experiments <- 5

geneNames <- paste0('gene', 1:genes)
expNames <- paste0('exp', 1:experiments)
elemNames <- paste0('elem', as.character(1:elements))

gcm <- GeneClassificationMatrix(
    matrix(runif(genes*experiments)<0.05, genes, experiments,
    dimnames=list(geneNames, expNames))
)

gcs <- GeneClassificationSparse(
    setNames(lapply(1:elements, function(x) {
        sample(1:genes, as.integer(runif(1, max=genes)))
    }), elemNames),
    geneNames
)

output <- tempfile()
test <- permutationTest(gcs, gcm, 1000, outfile=output, perRun=100)
print(test)

\dontrun{
## Using doParallel

library(doParallel)
registerDoParallel()
test <- permutationTest(gcs, gcm, 1000, outfile=output, perRun=500)
print(test)
}

}
